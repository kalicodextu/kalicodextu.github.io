<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>徐小妍小开心</title>
    <link>https://kalicodextu.github.io/</link>
    <description>Recent content on 徐小妍小开心</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 16 Sep 2018 02:52:48 +0800</lastBuildDate>
    
	<atom:link href="https://kalicodextu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Gin</title>
      <link>https://kalicodextu.github.io/post/gin/</link>
      <pubDate>Sun, 16 Sep 2018 02:52:48 +0800</pubDate>
      
      <guid>https://kalicodextu.github.io/post/gin/</guid>
      <description>Gin Web框架 Gin是一个用Golang写的一个web框架。它是类似Martin风格的API，因为httprouter,Gin的性能快了近40倍。高性能，良好的生产力。
安装 在安装Gin之前，首先需要安装Go的环境，配置好工作区。在此已部署好Go环境 1. 下载安装
$ go get -u github.com/gin-gonic/gin   在代码中导入 golang import &amp;quot;github.com/gin-gonic/gin&amp;quot;  导入net/http. 在使用http.StatusOk等一些常量的时候
import &amp;quot;net/http&amp;quot;  使用Govendor依赖管理工具 下载安装govendor
go get github.com/kardianos/govendor  创建项目文件夹，并进入目录
$ mkdir -p $GOPATH/src/github.com/myusername/project &amp;amp;&amp;amp; cd &amp;quot;$_&amp;quot;  使用vendor初始化项目，并且加入gin
$ govendor init $ govendor fetch github.com/gin-gonic/gin@v1.3  复制一个示例模板到项目中
$ curl https://raw.githubusercontent.com/gin-gonic/gin/master/examples/basic/main.go &amp;gt; main.go  运行项目
$ go run main.go  golang版本需求 需要 Go 1.6以上版本，后续可能需要1.7，最好用最新的稳定版
快速入门 新建一个main.go的文件，代码如下 ```golang package main</description>
    </item>
    
    <item>
      <title>化妆</title>
      <link>https://kalicodextu.github.io/post/%E5%8C%96%E5%A6%86/</link>
      <pubDate>Sun, 16 Sep 2018 02:50:15 +0800</pubDate>
      
      <guid>https://kalicodextu.github.io/post/%E5%8C%96%E5%A6%86/</guid>
      <description> 化妆顺序  第一步，首先，洗干净脸部肌肤。大家在涂抹任何护肤品之前，一定要先做好洁面工作。这样后续涂抹上的护肤品才能更好地被肌肤吸收。一般情况下，我们在清晨和晚间的时候涂抹护肤品比较合适 * 清晨，正是我们睡了一夜刚起床的时候，此时不少朋友脸上会比较油腻，这时用洗面奶洗一下脸会比较好。但是如果皮肤不油腻难受的话，就直接用清水洗一下就好了 * 晚间的时候一般用洗面奶清洗一下皮肤会比较好，因为我们在外面奔波了一整天，脸上肯定沾上了不少尘灰，一定要彻底清洁一下，才能让护肤品顺利进入我们的肌肤中去。
第二步，涂抹化妆水。 * 大家可以倒一些化妆水在手上，将它们涂抹到皮肤上，然后再轻轻拍打脸部肌肤直至被皮肤完全吸收。不少朋友也用化妆棉沾取化妆水，敷在脸上，也可以起到同样的补水效果。 第三步，涂抹精华液。 * 化妆水主要是要用来给我们的皮肤补水，乳液则是用来锁住我们肌肤的水分，防止它们流失的。精华液并不是必需的护肤品，大家要根据自己的肤质状况来判断自己是否需要涂抹精华液和需要哪种类型的精华液。 * 如果需要涂抹的话，精华液要放在化妆水后涂抹，因为只有补水工作做好了，精华液中的营养分子才能更好地被吸收。涂抹完精华液后，可以适当按摩下涂抹的部位，也是有助于精华液被更好地吸收。 最后一步是涂抹适量的乳液。 * 将乳液放在最后来涂抹，是为了更好地锁住皮肤中的水分，防止水分过快流失。不过，乳液的保湿效果没有霜膏类的好，因为霜膏质地粘稠，封闭性好，可以长久维持水嫩肌肤。
其它一些链接
  水和精华液哪个先用 水和精华液的正确使用顺序 http://www.360doc.com/content/18/0325/06/1315667_739967134.shtml  </description>
    </item>
    
    <item>
      <title>Golang编程</title>
      <link>https://kalicodextu.github.io/post/golang%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sun, 16 Sep 2018 02:47:11 +0800</pubDate>
      
      <guid>https://kalicodextu.github.io/post/golang%E7%BC%96%E7%A8%8B/</guid>
      <description>Go 学习笔记 什么是Go Go是一门 并发支持 、垃圾回收 的 编译型 系统编程语言，旨在创 造一门具有在静态编译语言的 高性能 和动态语言的 高效开发 之间拥有 良好平衡点的一门编程语言。
Go 的特点  类型安全 和 内存安全 以非常直观和极低代价的方案实现 高并发 高效的垃圾回收机制 快速编译（同时解决C语言中头文件太多的问题） 为多核计算机提供性能提升的方案 UTF-8编码支持
GOPATH 根据约定，GOPATH下需要建立3个目录：
 bin（存放编译后生成的可执行文件）
 pkg（存放编译后生成的包文件）
 src（存放项目源码）
Go 常用的命令 go get：获取远程包（需 提前安装 git或hg）
 go run：直接运行程序
 go build：测试编译，检查是否有编译错误
 go fmt：格式化源码（部分IDE在保存时自动调用）
 go install：编译包文件并编译整个程序
 go test：运行测试文件
 go doc：查看文档（CHM手册）
  本地官网搭建
godoc -http=:8080  Go 内置关键字 （25个均为小写）
break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var</description>
    </item>
    
    <item>
      <title>Schedule</title>
      <link>https://kalicodextu.github.io/schedule/</link>
      <pubDate>Sun, 16 Sep 2018 02:27:35 +0800</pubDate>
      
      <guid>https://kalicodextu.github.io/schedule/</guid>
      <description>旅游计划 &amp;hellip;  </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://kalicodextu.github.io/about/</link>
      <pubDate>Sun, 16 Sep 2018 02:19:58 +0800</pubDate>
      
      <guid>https://kalicodextu.github.io/about/</guid>
      <description>小妍妍</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kalicodextu.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kalicodextu.github.io/archives/</guid>
      <description>title: &amp;ldquo;归档&amp;rdquo; description: pythoner ，gocoder，love math，algorithm type: archives</description>
    </item>
    
  </channel>
</rss>