<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 徐小妍小开心</title>
    <link>https://kalicodextu.github.io/post/</link>
    <description>Recent content in Posts on 徐小妍小开心</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 16 Sep 2018 02:47:11 +0800</lastBuildDate>
    
	<atom:link href="https://kalicodextu.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang编程</title>
      <link>https://kalicodextu.github.io/post/golang%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sun, 16 Sep 2018 02:47:11 +0800</pubDate>
      
      <guid>https://kalicodextu.github.io/post/golang%E7%BC%96%E7%A8%8B/</guid>
      <description>Go 学习笔记 什么是Go Go是一门 并发支持 、垃圾回收 的 编译型 系统编程语言，旨在创 造一门具有在静态编译语言的 高性能 和动态语言的 高效开发 之间拥有 良好平衡点的一门编程语言。
Go 的特点  类型安全 和 内存安全 以非常直观和极低代价的方案实现 高并发 高效的垃圾回收机制 快速编译（同时解决C语言中头文件太多的问题） 为多核计算机提供性能提升的方案 UTF-8编码支持
GOPATH 根据约定，GOPATH下需要建立3个目录：
 bin（存放编译后生成的可执行文件）
 pkg（存放编译后生成的包文件）
 src（存放项目源码）
Go 常用的命令 go get：获取远程包（需 提前安装 git或hg）
 go run：直接运行程序
 go build：测试编译，检查是否有编译错误
 go fmt：格式化源码（部分IDE在保存时自动调用）
 go install：编译包文件并编译整个程序
 go test：运行测试文件
 go doc：查看文档（CHM手册）
  本地官网搭建
godoc -http=:8080  Go 内置关键字 （25个均为小写）
break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var</description>
    </item>
    
  </channel>
</rss>